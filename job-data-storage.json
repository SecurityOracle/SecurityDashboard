{"security-1-5":{"3e3434df-95db-4d5e-a11e-c088f565b4e4":{"data":{"appId":"02f007e1-8719-4ec0-aca9-49eeec7aa69d","name":"NodejsStarterApp","version":"0.0.1","uris":["vulnerable-demo.eu-gb.mybluemix.net"],"vulnerabilites":[{"module":"marked","version":"0.3.5","vulnerable_versions":"<=99.999.99999","patched_versions":"<0.0.0","title":"Sanitization bypass using HTML Entities","path":[["NodejsStarterApp@0.0.1","vulnerable-root@1.0.1","marked@0.3.5"]],"advisory":"https://nodesecurity.io/advisories/101","line":{"start":308,"end":312},"content":"# Sanitization bypass using HTML Entities\n## Overview:\nmarked is an application that is meant to parse and compile markdown.\n\nDue to the way that marked parses input, specifically HTML entities, it's possible to bypass marked's content injection protection (`sanitize: true`) to inject a `javascript:` URL.\n\nThis flaw exists because `&#xNNanything;` gets parsed to what it could and leaves the rest behind, resulting in just `anything;` being left. \n\nFor example:\n\nIf a malicious user could provide this input to the application `javascript&#x58document;alert&#40;1&#41;` resulting in a valid link, that when a user clicked it would execute `alert(1)`.\n\n## Recommendation:\nTo mitigate the flaw you have a couple of options. There's a [pull request](https://github.com/chjj/marked/pull/592) open that fixes this issue. Another option would be to switch to another markdown library such as remarkable.\n\n## References:\n- https://github.com/chjj/marked/pull/592\n- https://github.com/chjj/marked/pull/592/commits/2cff85979be8e7a026a9aca35542c470cf5da523","solution":["vulnerable-root@1.0.2"]}],"reportId":"3e3434df-95db-4d5e-a11e-c088f565b4e4"}},"b75fb5ce-f9fd-4027-a6a0-131ee33245ef":{"data":{"appId":"02f007e1-8719-4ec0-aca9-49eeec7aa69d","name":"NodejsStarterApp","version":"0.0.1","uris":["vulnerable-demo.eu-gb.mybluemix.net"],"vulnerabilities":[{"module":"marked","version":"0.3.5","vulnerable_versions":"<=99.999.99999","patched_versions":"<0.0.0","title":"Sanitization bypass using HTML Entities","path":[["NodejsStarterApp@0.0.1","vulnerable-root@1.0.1","marked@0.3.5"]],"advisory":"https://nodesecurity.io/advisories/101","line":{"start":308,"end":312},"content":"# Sanitization bypass using HTML Entities\n## Overview:\nmarked is an application that is meant to parse and compile markdown.\n\nDue to the way that marked parses input, specifically HTML entities, it's possible to bypass marked's content injection protection (`sanitize: true`) to inject a `javascript:` URL.\n\nThis flaw exists because `&#xNNanything;` gets parsed to what it could and leaves the rest behind, resulting in just `anything;` being left. \n\nFor example:\n\nIf a malicious user could provide this input to the application `javascript&#x58document;alert&#40;1&#41;` resulting in a valid link, that when a user clicked it would execute `alert(1)`.\n\n## Recommendation:\nTo mitigate the flaw you have a couple of options. There's a [pull request](https://github.com/chjj/marked/pull/592) open that fixes this issue. Another option would be to switch to another markdown library such as remarkable.\n\n## References:\n- https://github.com/chjj/marked/pull/592\n- https://github.com/chjj/marked/pull/592/commits/2cff85979be8e7a026a9aca35542c470cf5da523","solution":["vulnerable-root@1.0.2"]}],"reportId":"b75fb5ce-f9fd-4027-a6a0-131ee33245ef"}},"31c7b0ed-6746-4810-b986-85d06383d91d":{"data":{"appId":"02f007e1-8719-4ec0-aca9-49eeec7aa69d","name":"NodejsStarterApp","version":"0.0.1","uris":["vulnerable-demo.eu-gb.mybluemix.net"],"vulnerabilities":[],"reportId":"31c7b0ed-6746-4810-b986-85d06383d91d"}}},"security-1-1":{"3e3434df-95db-4d5e-a11e-c088f565b4e4":{"data":{"appId":"02f007e1-8719-4ec0-aca9-49eeec7aa69d","name":"NodejsStarterApp","version":"0.0.1","uris":["vulnerable-demo.eu-gb.mybluemix.net"],"vulnerabilites":[{"module":"marked","version":"0.3.5","vulnerable_versions":"<=99.999.99999","patched_versions":"<0.0.0","title":"Sanitization bypass using HTML Entities","path":[["NodejsStarterApp@0.0.1","vulnerable-root@1.0.1","marked@0.3.5"]],"advisory":"https://nodesecurity.io/advisories/101","line":{"start":308,"end":312},"content":"# Sanitization bypass using HTML Entities\n## Overview:\nmarked is an application that is meant to parse and compile markdown.\n\nDue to the way that marked parses input, specifically HTML entities, it's possible to bypass marked's content injection protection (`sanitize: true`) to inject a `javascript:` URL.\n\nThis flaw exists because `&#xNNanything;` gets parsed to what it could and leaves the rest behind, resulting in just `anything;` being left. \n\nFor example:\n\nIf a malicious user could provide this input to the application `javascript&#x58document;alert&#40;1&#41;` resulting in a valid link, that when a user clicked it would execute `alert(1)`.\n\n## Recommendation:\nTo mitigate the flaw you have a couple of options. There's a [pull request](https://github.com/chjj/marked/pull/592) open that fixes this issue. Another option would be to switch to another markdown library such as remarkable.\n\n## References:\n- https://github.com/chjj/marked/pull/592\n- https://github.com/chjj/marked/pull/592/commits/2cff85979be8e7a026a9aca35542c470cf5da523","solution":["vulnerable-root@1.0.2"]}]}},"b75fb5ce-f9fd-4027-a6a0-131ee33245ef":{"data":{"appId":"02f007e1-8719-4ec0-aca9-49eeec7aa69d","name":"NodejsStarterApp","version":"0.0.1","uris":["vulnerable-demo.eu-gb.mybluemix.net"],"vulnerabilities":[{"module":"marked","version":"0.3.5","vulnerable_versions":"<=99.999.99999","patched_versions":"<0.0.0","title":"Sanitization bypass using HTML Entities","path":[["NodejsStarterApp@0.0.1","vulnerable-root@1.0.1","marked@0.3.5"]],"advisory":"https://nodesecurity.io/advisories/101","line":{"start":308,"end":312},"content":"# Sanitization bypass using HTML Entities\n## Overview:\nmarked is an application that is meant to parse and compile markdown.\n\nDue to the way that marked parses input, specifically HTML entities, it's possible to bypass marked's content injection protection (`sanitize: true`) to inject a `javascript:` URL.\n\nThis flaw exists because `&#xNNanything;` gets parsed to what it could and leaves the rest behind, resulting in just `anything;` being left. \n\nFor example:\n\nIf a malicious user could provide this input to the application `javascript&#x58document;alert&#40;1&#41;` resulting in a valid link, that when a user clicked it would execute `alert(1)`.\n\n## Recommendation:\nTo mitigate the flaw you have a couple of options. There's a [pull request](https://github.com/chjj/marked/pull/592) open that fixes this issue. Another option would be to switch to another markdown library such as remarkable.\n\n## References:\n- https://github.com/chjj/marked/pull/592\n- https://github.com/chjj/marked/pull/592/commits/2cff85979be8e7a026a9aca35542c470cf5da523","solution":["vulnerable-root@1.0.2"]}]}},"31c7b0ed-6746-4810-b986-85d06383d91d":{"data":{"appId":"02f007e1-8719-4ec0-aca9-49eeec7aa69d","name":"NodejsStarterApp","version":"0.0.1","uris":["vulnerable-demo.eu-gb.mybluemix.net"],"vulnerabilities":[]}}}}